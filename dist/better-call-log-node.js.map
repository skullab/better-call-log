{"version":3,"file":"better-call-log-node.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC/OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACnDA;AACA;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNA;AACA;AACA","sources":["webpack://better-call-log/webpack/universalModuleDefinition","webpack://better-call-log/./src/BetterCall.ts","webpack://better-call-log/./src/BetterCallLevel.ts","webpack://better-call-log/./src/BetterCallOptions.ts","webpack://better-call-log/./src/BetterCallStyle.ts","webpack://better-call-log/./src/BetterCallStyleANSI.ts","webpack://better-call-log/./src/BetterCallStyleCSS.ts","webpack://better-call-log/./src/BetterCallStyleObject.ts","webpack://better-call-log/./src/Color.ts","webpack://better-call-log/webpack/bootstrap","webpack://better-call-log/webpack/runtime/define property getters","webpack://better-call-log/webpack/runtime/hasOwnProperty shorthand","webpack://better-call-log/webpack/runtime/make namespace object","webpack://better-call-log/./src/node.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, function() {\nreturn ","import { BetterCallLevel } from \"./BetterCallLevel\";\nimport { BetterCallOptions } from \"./BetterCallOptions\";\nexport class BetterCall {\n    constructor(name, options) {\n        this.name = name !== null && name !== void 0 ? name : 'Better Call LOG';\n        this.options = options !== null && options !== void 0 ? options : new BetterCallOptions();\n    }\n    static level(level) {\n        return BetterCall.getInstance().level(level);\n    }\n    level(level) {\n        if (level != null) {\n            this.options.level = level;\n        }\n        return this.options.level;\n    }\n    static getInstance() {\n        if (!BetterCall.instance) {\n            BetterCall.instance = new BetterCall();\n        }\n        return BetterCall.instance;\n    }\n    static isOff() {\n        return BetterCall.getInstance().isOff();\n    }\n    isOff() {\n        return !(this.level() | BetterCallLevel.OFF);\n    }\n    static assert(...args) {\n        return BetterCall.getInstance().assert(...args);\n    }\n    assert(...args) {\n        if (this.isOff())\n            return;\n        let assertion = args[0];\n        if (!assertion || !this.options.ignoreAssert) {\n            this.fire('group', 'ASSERT');\n        }\n        if (assertion && !this.options.ignoreAssert) {\n            console.info('ASSERTION ', ...args);\n        }\n        console.assert(...args);\n        if (!assertion || !this.options.ignoreAssert) {\n            this.groupEnd();\n        }\n    }\n    static clear() {\n        BetterCall.getInstance().clear();\n    }\n    clear() {\n        if (this.isOff())\n            return;\n        console.clear();\n    }\n    static count(label) {\n        return BetterCall.getInstance().count(label);\n    }\n    count(label) {\n        if (this.isOff())\n            return;\n        label = label !== null && label !== void 0 ? label : this.name;\n        console.count(label);\n    }\n    static countReset(label) {\n        return BetterCall.getInstance().countReset(label);\n    }\n    countReset(label) {\n        if (this.isOff())\n            return;\n        label = label !== null && label !== void 0 ? label : this.name;\n        console.countReset(label);\n    }\n    static debug(...args) {\n        return BetterCall.getInstance().debug(...args);\n    }\n    debug(...args) {\n        if (this.level() & BetterCallLevel.DEBUG)\n            this.fire('debug', ...args);\n    }\n    static dir(obj) {\n        return BetterCall.getInstance().dir(obj);\n    }\n    dir(obj) {\n        if (this.isOff())\n            return;\n        console.dir(obj);\n    }\n    static dirxml(obj) {\n        return BetterCall.getInstance().dirxml(obj);\n    }\n    dirxml(obj) {\n        if (this.isOff())\n            return;\n        console.dirxml(obj);\n    }\n    static error(...args) {\n        return BetterCall.getInstance().error(...args);\n    }\n    error(...args) {\n        if (this.level() & BetterCallLevel.ERROR)\n            this.fire('error', ...args);\n    }\n    static group(label) {\n        return BetterCall.getInstance().group(label);\n    }\n    group(label) {\n        if (this.isOff())\n            return;\n        label = label !== null && label !== void 0 ? label : this.name;\n        console.group(label);\n    }\n    static groupCollapsed(label) {\n        return BetterCall.getInstance().groupCollapsed(label);\n    }\n    groupCollapsed(label) {\n        if (this.isOff())\n            return;\n        label = label !== null && label !== void 0 ? label : this.name;\n        console.groupCollapsed(label);\n    }\n    static groupEnd(n) {\n        return BetterCall.getInstance().groupEnd(n);\n    }\n    groupEnd(n) {\n        if (this.isOff())\n            return;\n        n = n !== null && n !== void 0 ? n : 1;\n        for (let i = 0; i < n; i++) {\n            console.groupEnd();\n        }\n    }\n    static info(...args) {\n        return BetterCall.getInstance().info(...args);\n    }\n    info(...args) {\n        if (this.level() & BetterCallLevel.INFO)\n            this.fire('info', ...args);\n    }\n    static log(...args) {\n        return BetterCall.getInstance().log(...args);\n    }\n    log(...args) {\n        if (this.level() & BetterCallLevel.LOG)\n            this.fire('log', ...args);\n    }\n    static table(data) {\n        return BetterCall.getInstance().table(data);\n    }\n    table(data, name, columns) {\n        if (this.isOff())\n            return;\n        this.fire('group', 'TABLE', name !== null && name !== void 0 ? name : this.name);\n        console.table(data, columns);\n        this.groupEnd();\n    }\n    static time(label) {\n        return BetterCall.getInstance().time(label);\n    }\n    time(label) {\n        if (this.isOff())\n            return;\n        console.time(label);\n    }\n    static timeEnd(label) {\n        return BetterCall.getInstance().timeEnd(label);\n    }\n    timeEnd(label) {\n        if (this.isOff())\n            return;\n        this.fire('group', 'TIME END');\n        console.timeEnd(label);\n        this.groupEnd();\n    }\n    static timeLog(label) {\n        return BetterCall.getInstance().timeLog(label);\n    }\n    timeLog(label) {\n        if (this.isOff())\n            return;\n        this.fire('group', 'TIME LOG');\n        console.timeLog(label);\n        this.groupEnd();\n    }\n    static timeStamp(label) {\n        return BetterCall.getInstance().timeStamp(label);\n    }\n    timeStamp(label) {\n        let options = {\n            year: 'numeric', month: 'numeric', day: 'numeric',\n            hour: 'numeric', minute: 'numeric', second: 'numeric',\n            hour12: false,\n        };\n        // TODO use luxon\n        let locale = typeof navigator !== 'undefined' ? navigator.language : 'en-EN';\n        return label !== null && label !== void 0 ? label : '' + ' ' + Intl.DateTimeFormat(locale, options).format(new Date());\n    }\n    static trace(...args) {\n        return BetterCall.getInstance().trace(...args);\n    }\n    trace(...args) {\n        if (this.isOff())\n            return;\n        this.fire('trace', ...args);\n    }\n    static warn(...args) {\n        return BetterCall.getInstance().warn(...args);\n    }\n    warn(...args) {\n        if (this.level() & BetterCallLevel.WARNING)\n            this.fire('warn', ...args);\n    }\n    fire(tag, ...args) {\n        let p = this.options.style.package(tag);\n        let tagSpaces = '';\n        let nameSpaces = '';\n        for (let i = 0; i < 10 - p.tag.length; i++)\n            tagSpaces += ' ';\n        let name = this.name.length > 20 ? this.name.substring(0, 20) + '...' : this.name;\n        for (let i = 0; i < 25 - name.length; i++)\n            nameSpaces += ' ';\n        let content = [];\n        content[p.order['tag']] = p.tag + tagSpaces + '➤ ' + name + nameSpaces + (this.options.showTimestamp ? '➤' + this.timeStamp() : '');\n        content[p.order['style']] = p.style;\n        content.push('\\n↳');\n        if (this.options.compactMode) {\n            content.pop();\n            this.options.compactCollapsed ? console.groupCollapsed.apply(this, content) : console.group.apply(this, content);\n        }\n        console[tag].apply(this, (this.options.compactMode ? args : content.concat(args)));\n        if (this.options.compactMode) {\n            console.groupEnd.call(this);\n        }\n    }\n}\nBetterCall.LEVEL_OFF = 0x00;\nBetterCall.LEVEL_INFO = 0x10;\nBetterCall.LEVEL_LOG = 0x20;\nBetterCall.LEVEL_DEBUG = 0x30;\nBetterCall.LEVEL_WARNING = 0x40;\nBetterCall.LEVEL_ERROR = 0x50;\n","export var BetterCallLevel;\n(function (BetterCallLevel) {\n    BetterCallLevel[BetterCallLevel[\"INFO\"] = 2] = \"INFO\";\n    BetterCallLevel[BetterCallLevel[\"LOG\"] = 4] = \"LOG\";\n    BetterCallLevel[BetterCallLevel[\"DEBUG\"] = 8] = \"DEBUG\";\n    BetterCallLevel[BetterCallLevel[\"WARNING\"] = 16] = \"WARNING\";\n    BetterCallLevel[BetterCallLevel[\"ERROR\"] = 32] = \"ERROR\";\n    BetterCallLevel[BetterCallLevel[\"OFF\"] = 0] = \"OFF\";\n    BetterCallLevel[BetterCallLevel[\"ALL\"] = 255] = \"ALL\";\n})(BetterCallLevel || (BetterCallLevel = {}));\n","import { BetterCallLevel } from \"./BetterCallLevel\";\nimport { BetterCallStyleANSI } from \"./BetterCallStyleANSI\";\nimport { BetterCallStyleCSS } from \"./BetterCallStyleCSS\";\nexport class BetterCallOptions {\n    constructor() {\n        this.level = BetterCallLevel.ALL;\n        this.ignoreAssert = false;\n        this.style = typeof window !== 'undefined' ? new BetterCallStyleCSS() : new BetterCallStyleANSI;\n        this.showTimestamp = true;\n        this.compactMode = false;\n        this.compactCollapsed = false;\n    }\n}\n","import { BetterCallStyleObject } from \"./BetterCallStyleObject\";\nexport class BetterCallStyle {\n    constructor(style) {\n        this.style = style !== null && style !== void 0 ? style : new BetterCallStyleObject();\n    }\n}\n","import { BetterCallStyle } from \"./BetterCallStyle\";\nimport { Color } from \"./Color\";\nexport class BetterCallStyleANSI extends BetterCallStyle {\n    constructor() {\n        super();\n        this.style.base = [];\n        this.style.info = [\n            Color.BgBlue,\n            Color.FgWhite,\n        ];\n        this.style.log = [\n            Color.BgBlack,\n            Color.FgWhite,\n        ];\n        this.style.debug = [\n            Color.BgCyan,\n            Color.FgBlack,\n        ];\n        this.style.warn = [\n            Color.BgYellow,\n            Color.FgBlack,\n        ];\n        this.style.error = [\n            Color.BgRed,\n            Color.FgBlack,\n        ];\n        this.style.trace = [\n            Color.BgMagenta,\n            Color.FgWhite,\n        ];\n        this.style.table = [\n            Color.BgMagenta,\n            Color.FgWhite,\n        ];\n        this.style.group = [\n            Color.BgMagenta,\n            Color.FgWhite,\n        ];\n        this.style.assert = [\n            Color.BgMagenta,\n            Color.FgWhite,\n        ];\n    }\n    toString(tag) {\n        return (this.style.base.join('') + (this.style[tag] ? this.style[tag].join('') : '') + '%s' + Color.Reset);\n    }\n    package(tag) {\n        return { style: this.toString(tag), tag: tag.toUpperCase(), order: { style: 0, tag: 1 } };\n    }\n}\n","import { BetterCallStyle } from \"./BetterCallStyle\";\nexport class BetterCallStyleCSS extends BetterCallStyle {\n    constructor() {\n        super();\n        this.style.base = [\n            \"padding: 2px 4px\",\n            \"border-radius: 2px\"\n        ];\n        this.style.debug = [\n            \"background-color: #5EEBC2\",\n            \"color: #000000\"\n        ];\n        this.style.error = [\n            \"background-color: #F54E47\",\n            \"color: #000000\"\n        ];\n        this.style.info = [\n            \"background-color: #30A2F5\",\n            \"color: #D0FFFF\"\n        ];\n        this.style.log = [\n            \"background-color: #000000\",\n            \"color: #FFFFFF\"\n        ];\n        this.style.warn = [\n            \"background-color: #EBBA3E\",\n            \"color: #000000\"\n        ];\n        this.style.trace = [\n            \"background-color: #69187D\",\n            \"color: #FFFFFF\"\n        ];\n        this.style.table = [\n            \"background-color: #69187D\",\n            \"color: #FFFFFF\"\n        ];\n        this.style.group = [\n            \"background-color: #69187D\",\n            \"color: #FFFFFF\"\n        ];\n        this.style.assert = [\n            \"background-color: #69187D\",\n            \"color: #FFFFFF\"\n        ];\n    }\n    toString(tag) {\n        return (this.style.base.join(';') + ';') + (this.style[tag] ? this.style[tag].join(';') + ';' : '');\n    }\n    package(tag) {\n        return { style: this.toString(tag), tag: '%c' + tag.toUpperCase(), order: { tag: 0, style: 1 } };\n    }\n}\n","export class BetterCallStyleObject {\n}\n","export var Color;\n(function (Color) {\n    Color[\"Reset\"] = \"\\u001B[0m\";\n    Color[\"Bright\"] = \"\\u001B[1m\";\n    Color[\"Dim\"] = \"\\u001B[2m\";\n    Color[\"Underscore\"] = \"\\u001B[4m\";\n    Color[\"Blink\"] = \"\\u001B[5m\";\n    Color[\"Reverse\"] = \"\\u001B[7m\";\n    Color[\"Hidden\"] = \"\\u001B[8m\";\n    Color[\"FgBlack\"] = \"\\u001B[30m\";\n    Color[\"FgRed\"] = \"\\u001B[31m\";\n    Color[\"FgGreen\"] = \"\\u001B[32m\";\n    Color[\"FgYellow\"] = \"\\u001B[33m\";\n    Color[\"FgBlue\"] = \"\\u001B[34m\";\n    Color[\"FgMagenta\"] = \"\\u001B[35m\";\n    Color[\"FgCyan\"] = \"\\u001B[36m\";\n    Color[\"FgWhite\"] = \"\\u001B[37m\";\n    Color[\"BgBlack\"] = \"\\u001B[40m\";\n    Color[\"BgRed\"] = \"\\u001B[41m\";\n    Color[\"BgGreen\"] = \"\\u001B[42m\";\n    Color[\"BgYellow\"] = \"\\u001B[43m\";\n    Color[\"BgBlue\"] = \"\\u001B[44m\";\n    Color[\"BgMagenta\"] = \"\\u001B[45m\";\n    Color[\"BgCyan\"] = \"\\u001B[46m\";\n    Color[\"BgWhite\"] = \"\\u001B[47m\";\n})(Color || (Color = {}));\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { BetterCall as BetterCallMain } from './BetterCall';\nexport default class BetterCall extends BetterCallMain {\n}\n"],"names":[],"sourceRoot":""}